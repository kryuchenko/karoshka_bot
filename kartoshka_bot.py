import asyncio
import logging
import os
import datetime
import random

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from dotenv import load_dotenv
from aiogram.client.bot import DefaultBotProperties

logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
EDITOR_IDS_STR = os.getenv("EDITOR_IDS")  # –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
PUBLISH_CHAT_ID = os.getenv("PUBLISH_CHAT_ID")
BOT_NAME = os.getenv("BOT_NAME")
POST_FREQUENCY_MINUTES_STR = os.getenv("POST_FREQUENCY_MINUTES")  # –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ—Å—Ç–æ–≤ –≤ –º–∏–Ω—É—Ç–∞—Ö (—Å—Ç—Ä–æ–∫–∞)
CRYPTOSELECTARCHY_STR = os.getenv("CRYPTOSELECTARCHY")  # –°—Ç—Ä–æ–∫–∞ "true" –∏–ª–∏ "false"
VOTES_TO_APPROVE_STR = os.getenv("VOTES_TO_APPROVE")
VOTES_TO_REJECT_STR = os.getenv("VOTES_TO_REJECT")

# –°–ø–∏—Å–æ–∫ –º–µ—Ç–∞–ª–ª–æ–≤ –∏ —Ç–æ–∫—Å–∏–Ω–æ–≤ –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –∫–æ–¥–µ
METALS_AND_TOXINS = [
    "–ê–ª—é–º–∏–Ω–∏–µ–≤–æ–π", "–ñ–µ–ª–µ–∑–Ω–æ–π", "–ú–µ–¥–Ω–æ–π", "–°–≤–∏–Ω—Ü–æ–≤–æ–π", "–¶–∏–Ω–∫–æ–≤–æ–π", "–¢–∏—Ç–∞–Ω–æ–≤–æ–π", "–ù–∏–∫–µ–ª–µ–≤–æ–π",
    "–û–∫—Å–∏–¥-–∂–µ–ª–µ–∑–Ω–æ–π", "–û–∫—Å–∏–¥-—Ü–∏–Ω–∫–æ–≤–æ–π", "–û–∫—Å–∏–¥-—Ç–∏—Ç–∞–Ω–æ–≤–æ–π", "–£—Ä–∞–Ω–æ–≤–æ–π", "–ü–ª—É—Ç–æ–Ω–∏–µ–≤–æ–π", "–¢–æ—Ä–∏–µ–≤–æ–π",
    "–†–∞–¥–∏–µ–≤–æ–π", "–ü–æ–ª–æ–Ω–∏–µ–≤–æ–π", "–ê–∫—Ç–∏–Ω–∏–µ–≤–æ–π", "–ü—Ä–æ—Ç–∞–∫—Ç–∏–Ω–∏–µ–≤–æ–π", "–ê–º–µ—Ä–∏—Ü–∏–µ–≤–æ–π", "–ö—é—Ä–∏–µ–≤–æ–π",
    "–ù–µ–ø—Ç—É–Ω–∏–µ–≤–æ–π", "–§—Ä–∞–Ω—Ü–∏–µ–≤–æ–π", "–õ–æ—É—Ä–µ–Ω—Å–∏–µ–≤–æ–π", "–†—É—Ç–µ–Ω–∏–µ–≤–æ–π", "–¶–µ–∑–∏–µ–≤–æ–π", "–ë–µ—Ä–∏–ª–ª–∏–µ–≤–æ–π",
    "–£—Ä–∞–Ω-235", "–î–∏–æ–∫—Å–∏–¥-—Ç–æ—Ä–∏–µ–≤–æ–π", "–ö–∞—Ä–±–æ–Ω–∞—Ç-—Ä–∞–¥–∏–µ–≤–æ–π", "–ì–µ–∫—Å–∞—Ñ—Ç–æ—Ä–∏–¥-—É—Ä–∞–Ω–æ–≤–æ–π",
    "–ù–∏—Ç—Ä–∞—Ç-—Ç–æ—Ä–∏–µ–≤–æ–π", "–û–∫—Å–∏–¥-–ø–ª—É—Ç–æ–Ω–∏–µ–≤–æ–π", "–î–µ–π—Ç–µ—Ä–∏–µ–≤–æ–π", "–¢—Ä–∏—Ç–∏–µ–≤–æ–π", "–¶–∏–∞–Ω–∏—Å—Ç–æ–π",
    "–†–∏—Ü–∏–Ω–æ–≤–æ–π", "–°–∞—Ä–∏–Ω–æ–≤–æ–π", "–ó–æ–º–∞–Ω–æ–≤–æ–π", "–í–∏-–ò–∫—Å–Ω–æ–π (VX)", "–ë–æ—Ç—É–ª–æ—Ç–æ–∫—Å–∏–Ω–æ–≤–æ–π",
    "–°—Ç—Ä–∏—Ö–Ω–∏–Ω–Ω–æ–π", "–§–æ—Å–≥–µ–Ω–æ–≤–æ–π", "–î–∏–æ–∫—Å–∏–Ω–æ–≤–æ–π", "–¢–µ—Ç—Ä–æ–¥–æ–∫—Å–∏–Ω–æ–≤–æ–π", "–ü–æ–ª–æ–Ω–∏–µ–≤–æ–π-210",
    "–ú–µ—Ä–∫—É—Ä–∏–µ–≤–æ–π (—Ä—Ç—É—Ç–Ω–æ–π)", "–ê–º–∞–Ω–∏—Ç–∏–Ω–æ–≤–æ–π (–≥—Ä–∏–±–Ω–æ–π)", "–ê—Ä—Å–µ–Ω–æ–≤–æ–π", "–¢–∞–ª–∏–µ–≤–æ–π",
    "–ú–µ—Ç–∞–Ω–æ–ª—å–Ω–æ–π", "–≠—Ç–∏–ª–µ–Ω–≥–ª–∏–∫–æ–ª–µ–≤–æ–π", "–¢—Ä–∏—Ö–ª–æ—Ä—ç—Ç–∏–ª–µ–Ω–æ–≤–æ–π", "–•–ª–æ—Ä–∏–Ω–æ–≤–æ–π",
    "–ú–æ–Ω–æ–æ–∫—Å–∏–¥-—É–≥–ª–µ—Ä–æ–¥–Ω–æ–π (—É–≥–∞—Ä–Ω–æ–π)", "–ì–µ–∫—Å–∞—Ñ—Ç–æ—Ä–æ–≤–æ–π", "–§—Ç–æ—Ä–≤–æ–¥–æ—Ä–æ–¥–Ω–æ–π",
    "–ë—Ä–æ–º–∞—Ü–µ—Ç–æ–Ω–æ–≤–æ–π", "–•–ª–æ—Ä–∞—Ü–µ—Ç–æ–Ω–æ–≤–æ–π", "–ö–∞—Ä–±–æ—Ñ–æ—Å–æ–≤–æ–π", "–•–ª–æ—Ä–æ—Ñ–æ—Ä–º–æ–≤–æ–π", "–ë–∞—Ä–±–∏—Ç—É—Ä–æ–≤–æ–π",
    "–ö–∞–ª–∏–π-—Ü–∏–∞–Ω–∏—Å—Ç–æ–π", "–ú–µ—Ç–∏–ª—Ä—Ç—É—Ç–Ω–æ–π"
]

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
required_env_vars = {
    "BOT_TOKEN": API_TOKEN,
    "EDITOR_IDS": EDITOR_IDS_STR,
    "PUBLISH_CHAT_ID": PUBLISH_CHAT_ID,
    "BOT_NAME": BOT_NAME,
    "POST_FREQUENCY_MINUTES": POST_FREQUENCY_MINUTES_STR,
    "CRYPTOSELECTARCHY": CRYPTOSELECTARCHY_STR,
    "VOTES_TO_APPROVE": VOTES_TO_APPROVE_STR,
    "VOTES_TO_REJECT": VOTES_TO_REJECT_STR,
}
missing_vars = [k for k, v in required_env_vars.items() if not v]
if missing_vars:
    raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing_vars}")

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã
EDITOR_IDS = [int(x.strip()) for x in EDITOR_IDS_STR.split(",")]
PUBLISH_CHAT_ID = int(PUBLISH_CHAT_ID)
POST_FREQUENCY_MINUTES = int(POST_FREQUENCY_MINUTES_STR)
VOTES_TO_APPROVE = int(VOTES_TO_APPROVE_STR)
VOTES_TO_REJECT = int(VOTES_TO_REJECT_STR)
CRYPTOSELECTARCHY = (CRYPTOSELECTARCHY_STR.lower() == "true")

if CRYPTOSELECTARCHY:
    print("–ö—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –æ–ª–∏–≥–∞—Ä—Ö–∏—è –≤–∫–ª—é—á–µ–Ω–∞! –í–ª–∞—Å—Ç—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–∞–π–Ω–æ–º—É —Å–æ–≤–µ—Ç—É –º—É–¥—Ä–µ—Ü–æ–≤.")
else:
    print("–ï–¥–∏–Ω–æ–ª–∏—á–Ω—ã–π –£–∑—É—Ä–ø–∞—Ç–æ—Ä —É –≤–ª–∞—Å—Ç–∏. –í—Å–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))

user_publish_choice = {}  # user_id -> "user" –∏–ª–∏ "potato"

# –î–ª—è –∫–∞–∂–¥–æ–≥–æ meme_id —Ö—Ä–∞–Ω–∏—Ç—Å—è dict —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –º–µ–º–µ –∏ –≥–æ–ª–æ—Å–∞–º–∏ –∫—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö–æ–≤
pending_memes = {}
meme_counter = 0

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
last_published_time = datetime.datetime.min
scheduled_posts = []

async def main():
    global last_published_time
    global bot  # –¢–µ–ø–µ—Ä—å bot —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è
    dp = Dispatcher()

    @dp.message(Command("start"))
    async def cmd_start(message: Message):
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üë§ –û—Ç —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏ (–≤–∞—à–µ –∏–º—è –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω–æ).",
                        callback_data="choice_user"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="ü•î –ê–Ω–æ–Ω–∏–º–Ω–æ (–æ—Ç –∏–º–µ–Ω–∏ ¬´–ö–∞—Ä—Ç–æ—à–∫–∏¬ª).",
                        callback_data="choice_potato"
                    )
                ]
            ]
        )

        if CRYPTOSELECTARCHY:
            intro_text = (
                f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç {BOT_NAME}.\n\n"
                "–£—Ä–∞! –°–≤–µ—Ä—à–∏–ª–æ—Å—å! –ì–∞–¥–∫–∏–π –£–∑—É—Ä–ø–∞—Ç–æ—Ä –∫–∞–Ω—É–ª –≤ –Ω–µ–±—ã—Ç–∏–µ, –∏ —Ç–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—É–ø–∏–ª–∞ —ç–ø–æ—Ö–∞ –ö—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π –æ–ª–∏–≥–∞—Ä—Ö–∏–∏!\n"
                "–†–µ—à–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ —Ç–∞–π–Ω–æ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—è–º–∏. –ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏!\n\n"
                "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –º–µ–º?"
            )
        else:
            intro_text = (
                f"–ü—Ä–∏–≤–µ—Ç! –Ø {BOT_NAME}.\n\n"
                "–°–µ–π—á–∞—Å –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–∞ –ö—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –æ–ª–∏–≥–∞—Ä—Ö–∏—è.\n"
                "–í–æ –≤–ª–∞—Å—Ç–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ï–¥–∏–Ω–æ–ª–∏—á–Ω—ã–π –£–∑—É—Ä–ø–∞—Ç–æ—Ä, –Ω–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! –ö–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –æ–Ω –æ—Ç–æ–π–¥—ë—Ç –æ—Ç –≤–ª–∞—Å—Ç–∏ –∏ –ø–µ—Ä–µ–¥–∞—Å—Ç –µ—ë –≥—Ä—É–ø–ø–µ –º—É–¥—Ä—ã—Ö –ö—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö–æ–≤.\n\n"
                "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –º–µ–º?"
            )

        await message.answer(intro_text, reply_markup=keyboard)

    @dp.callback_query(F.data.in_({"choice_user", "choice_potato"}))
    async def handle_choice(callback: CallbackQuery):
        user_id = callback.from_user.id

        if callback.data == "choice_user":
            user_publish_choice[user_id] = "user"
            await callback.message.answer(
                "–ë—É–¥—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏. –ü—Ä–∏—à–ª–∏—Ç–µ –º–µ–º (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/gif)."
            )
        else:
            user_publish_choice[user_id] = "potato"
            await callback.message.answer(
                "–ë—É–¥—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ (–æ—Ç –∏–º–µ–Ω–∏ ¬´–ö–∞—Ä—Ç–æ—à–∫–∏¬ª). –ü—Ä–∏—à–ª–∏—Ç–µ –º–µ–º (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/gif)."
            )
        await callback.answer()

    # –î–æ–±–∞–≤–ª—è–µ–º "animation" –¥–ª—è gif
    @dp.message(F.content_type.in_({"text", "photo", "video", "animation"}))
    async def handle_meme_suggestion(message: Message):
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø–æ—Å–æ–± –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if user_id not in user_publish_choice:
            await message.answer(
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start."
            )
            return

        global meme_counter
        meme_counter += 1
        meme_id = meme_counter

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–º–µ
        pending_memes[meme_id] = {
            "user_id": user_id,
            "publish_choice": user_publish_choice[user_id],
            "content": message,
            "votes": {}  # editor_id -> "approve" –∏–ª–∏ "reject"
        }

        # –ö–Ω–æ–ø–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        approve_button = InlineKeyboardButton(
            text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
            callback_data=f"approve_{meme_id}"
        )
        reject_button = InlineKeyboardButton(
            text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
            callback_data=f"reject_{meme_id}"
        )
        keyboard_for_editor = InlineKeyboardMarkup(
            inline_keyboard=[[approve_button, reject_button]]
        )

        # "–û—Ç –∫–æ–≥–æ" –¥–ª—è –∫—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö–æ–≤
        if user_publish_choice[user_id] == "user":
            from_text = f"–û—Ç @{message.from_user.username or message.from_user.id}"
        else:
            from_text = "–û—Ç –ê–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

        # –¢–µ–∫—Å—Ç –º–µ–º–∞ (caption –∏–ª–∏ text)
        user_text = message.caption if message.caption else message.text
        meme_info_text = (
            f"–ú–µ–º ID: {meme_id}\n\n"
            f"{user_text}\n\n"
            f"{from_text}\n"
            f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∫: {user_publish_choice[user_id]}"
        )

        # –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º ¬´–∫—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö–∞–º¬ª (EDITOR_IDS)
        for editor_id in EDITOR_IDS:
            try:
                if message.photo:
                    largest_photo_id = message.photo[-1].file_id
                    await bot.send_photo(
                        chat_id=editor_id,
                        photo=largest_photo_id,
                        caption=meme_info_text,
                        reply_markup=keyboard_for_editor
                    )
                elif message.video:
                    video_id = message.video.file_id
                    await bot.send_video(
                        chat_id=editor_id,
                        video=video_id,
                        caption=meme_info_text,
                        reply_markup=keyboard_for_editor
                    )
                elif message.animation:
                    animation_id = message.animation.file_id
                    await bot.send_animation(
                        chat_id=editor_id,
                        animation=animation_id,
                        caption=meme_info_text,
                        reply_markup=keyboard_for_editor
                    )
                else:
                    # –¢–µ–∫—Å—Ç–æ–≤—ã–π –º–µ–º
                    await bot.send_message(
                        chat_id=editor_id,
                        text=meme_info_text,
                        reply_markup=keyboard_for_editor
                    )
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö—É {editor_id}: {e}")

        await message.answer("–í–∞—à –º–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")

    @dp.callback_query(F.data.startswith(("approve_", "reject_")))
    async def editor_callback(callback: CallbackQuery):
        data = callback.data
        action, meme_id_str = data.split("_")
        meme_id = int(meme_id_str)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –º–µ–º –µ—â—ë –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
        if meme_id not in pending_memes:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
            return

        meme_info = pending_memes[meme_id]
        user_id = meme_info["user_id"]
        votes_dict = meme_info["votes"]

        editor_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥–æ–ª–æ—Å –∫—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö–∞ (–µ—Å–ª–∏ –±—ã–ª)
        prev_vote = votes_dict.get(editor_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –≥–æ–ª–æ—Å
        if prev_vote == action:
            # –ì–æ–ª–æ—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ —É–≤–µ–¥–æ–º–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await callback.answer("–í–∞—à –≥–æ–ª–æ—Å —É–∂–µ –±—ã–ª —É—á—Ç—ë–Ω.", show_alert=False)
            return
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ–ª–æ—Å –∫—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö–∞
            votes_dict[editor_id] = action  # "approve" –∏–ª–∏ "reject"

        # --- –ï—Å–ª–∏ –∫—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –æ–ª–∏–≥–∞—Ä—Ö–∏—è (Cryptoselectarchy) –≤—ã–∫–ª—é—á–µ–Ω–∞ ---
        if not CRYPTOSELECTARCHY:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –æ–¥–∏–Ω –≥–æ–ª–æ—Å –≤—Å—ë —Ä–µ—à–∞–µ—Ç
            if action == "approve":
                try:
                    await schedule_or_publish_meme(meme_info)
                    await callback.message.answer(f"–ú–µ–º (ID {meme_id}) –æ–¥–æ–±—Ä–µ–Ω –∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–Ω—É—Ç—Ä–∏ schedule_or_publish_meme
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
                    await callback.message.answer(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–º (ID {meme_id}). –û—à–∏–±–∫–∞: {e}"
                    )
            else:
                # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
                await bot.send_message(user_id, "–í–∞—à –º–µ–º –æ—Ç–∫–ª–æ–Ω—ë–Ω —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º.")
                await callback.message.answer(f"–ú–µ–º (ID {meme_id}) –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
            # –£–±–∏—Ä–∞–µ–º –∏–∑ ¬´–æ–∂–∏–¥–∞–Ω–∏—è¬ª
            del pending_memes[meme_id]
            await callback.answer()
            return

        # --- –ù–∏–∂–µ –ª–æ–≥–∏–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á—ë–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π –æ–ª–∏–≥–∞—Ä—Ö–∏–∏ ---
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞
        approves = sum(1 for v in votes_dict.values() if v == "approve")
        rejects = sum(1 for v in votes_dict.values() if v == "reject")
        total_votes = len(votes_dict)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö–∞, —á—Ç–æ –µ–≥–æ –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω
        await callback.answer("–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω.", show_alert=False)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ–ª–æ—Å–µ
        if prev_vote is None:
            # –ù–æ–≤—ã–π –≥–æ–ª–æ—Å –æ—Ç —ç—Ç–æ–≥–æ –∫—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö–∞
            if total_votes == 1:
                # –≠—Ç–æ –ø–µ—Ä–≤—ã–π –≥–æ–ª–æ—Å –ø–æ —ç—Ç–æ–º—É –º–µ–º—É
                if action == "approve":
                    await bot.send_message(
                        user_id,
                        "–ö—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –ó–ê –≤–∞—à –º–µ–º!"
                    )
                else:
                    await bot.send_message(
                        user_id,
                        "–ö—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö –æ—Ç–≤–µ—Ä–≥ –≤–∞—à –Ω–µ—Å–º–µ—à–Ω–æ–π –º–µ–º!"
                    )
            else:
                # –ù–µ –ø–µ—Ä–≤—ã–π –≥–æ–ª–æ—Å, –Ω–æ —ç—Ç–æ—Ç –∫—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö –≥–æ–ª–æ—Å—É–µ—Ç –≤–ø–µ—Ä–≤—ã–µ
                if action == "approve":
                    await bot.send_message(
                        user_id,
                        "–ï—â—ë –æ–¥–∏–Ω –ö—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –ó–ê –≤–∞—à –º–µ–º!"
                    )
                else:
                    await bot.send_message(
                        user_id,
                        "–ï—â—ë –æ–¥–∏–Ω –ö—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö –æ—Ç–≤–µ—Ä–≥ –≤–∞—à –Ω–µ—Å–º–µ—à–Ω–æ–π –º–µ–º!"
                    )
        else:
            # –ö—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö –∏–∑–º–µ–Ω–∏–ª —Å–≤–æ—ë —Ä–µ—à–µ–Ω–∏–µ
            if action == "approve":
                await bot.send_message(
                    user_id,
                    "–ú—É–¥—Ä—ã–π –ö—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö –ø–µ—Ä–µ–¥—É–º–∞–ª –∏ —Ç–µ–ø–µ—Ä—å –ì–û–õ–û–°–£–ï–¢ –ó–ê –≤–∞—à –º–µ–º."
                )
            else:
                await bot.send_message(
                    user_id,
                    "–ú—É–¥—Ä—ã–π –ö—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö –ø–µ—Ä–µ–¥—É–º–∞–ª –∏ —Ç–µ–ø–µ—Ä—å –ì–û–õ–û–°–£–ï–¢ –ü–†–û–¢–ò–í –≤–∞—à–µ–≥–æ –º–µ–º–∞."
                )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –ø–æ—Ä–æ–≥–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        if approves >= VOTES_TO_APPROVE:
            try:
                await schedule_or_publish_meme(meme_info)
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–Ω—É—Ç—Ä–∏ schedule_or_publish_meme
                del pending_memes[meme_id]

                # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, —Ç.–∫. —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ
                await callback.message.edit_reply_markup(reply_markup=None)

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
                await callback.message.answer(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–º (ID {meme_id}). –û—à–∏–±–∫–∞: {e}"
                )
            return

        if rejects >= VOTES_TO_REJECT:
            await bot.send_message(user_id, "–ú–µ–º –Ω–∞–±—Ä–∞–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤ –ü–†–û–¢–ò–í –∏ –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
            del pending_memes[meme_id]

            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            await callback.message.edit_reply_markup(reply_markup=None)
            return

        # –ï—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤ –µ—â—ë –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –∂–¥—ë–º –¥–∞–ª—å–Ω–µ–π—à–∏—Ö.

    async def schedule_or_publish_meme(meme_info):
        global last_published_time, scheduled_posts
        user_id = meme_info["user_id"]
        now = datetime.datetime.now()
        next_possible_time = last_published_time + datetime.timedelta(minutes=POST_FREQUENCY_MINUTES)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if now >= next_possible_time and not scheduled_posts:
            # –ü—É–±–ª–∏–∫—É–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            await publish_meme(meme_info)
            last_published_time = datetime.datetime.now()
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await bot.send_message(user_id, "–í–∞—à –º–µ–º –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
        else:
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            if scheduled_posts:
                # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ–º–∞
                last_scheduled_time = scheduled_posts[-1][0]
                scheduled_time = last_scheduled_time + datetime.timedelta(minutes=POST_FREQUENCY_MINUTES)
            else:
                scheduled_time = next_possible_time

            scheduled_posts.append((scheduled_time, meme_info))
            await bot.send_message(user_id, f"–í–∞—à –º–µ–º –æ–¥–æ–±—Ä–µ–Ω –∏ —Ç–µ–ø–µ—Ä—å –∂–¥—ë—Ç –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é. –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {scheduled_time.strftime('%H:%M')} –ø–æ UTC")
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            scheduled_posts.sort(key=lambda x: x[0])

    async def publish_meme(meme_info):
        user_id = meme_info["user_id"]
        choice = meme_info["publish_choice"]
        original_message = meme_info["content"]

        # –¢–µ–∫—Å—Ç –º–µ–º–∞
        user_text = original_message.caption if original_message.caption else original_message.text

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ¬´–ø—Ä–µ—Ñ–∏–∫—Å¬ª –¥–ª—è –ø–æ—Å—Ç–∞
        if choice == "user":
            prefix = f"–ú–µ–º –æ—Ç @{original_message.from_user.username or user_id}"
        else:
            random_metal = random.choice(METALS_AND_TOXINS)
            prefix = f"–ú–µ–º –æ—Ç –ê–Ω–æ–Ω–∏–º–Ω–æ–π {random_metal} –ö–∞—Ä—Ç–æ—à–∫–∏"

        try:
            if original_message.photo:
                photo_id = original_message.photo[-1].file_id
                await bot.send_photo(
                    chat_id=PUBLISH_CHAT_ID,
                    photo=photo_id,
                    caption=(f"{prefix}\n\n{user_text}" if user_text else prefix)
                )
            elif original_message.video:
                video_id = original_message.video.file_id
                await bot.send_video(
                    chat_id=PUBLISH_CHAT_ID,
                    video=video_id,
                    caption=(f"{prefix}\n\n{user_text}" if user_text else prefix)
                )
            elif original_message.animation:
                animation_id = original_message.animation.file_id
                await bot.send_animation(
                    chat_id=PUBLISH_CHAT_ID,
                    animation=animation_id,
                    caption=(f"{prefix}\n\n{user_text}" if user_text else prefix)
                )
            else:
                # –¢–µ–∫—Å—Ç
                text_for_channel = f"{prefix}\n\n{user_text}"
                await bot.send_message(
                    chat_id=PUBLISH_CHAT_ID,
                    text=text_for_channel
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

    async def scheduled_publisher():
        global scheduled_posts, last_published_time
        while True:
            now = datetime.datetime.now()
            if scheduled_posts:
                scheduled_posts.sort(key=lambda x: x[0])  # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                next_time, meme_info = scheduled_posts[0]
                wait_seconds = (next_time - now).total_seconds()
                if wait_seconds > 0:
                    await asyncio.sleep(min(wait_seconds, 10))
                else:
                    # –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    scheduled_posts.pop(0)
                    await publish_meme(meme_info)
                    last_published_time = datetime.datetime.now()
            else:
                # –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤, –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
                await asyncio.sleep(10)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    asyncio.create_task(scheduled_publisher())

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
