import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from dotenv import load_dotenv
from aiogram.client.bot import DefaultBotProperties

logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env)
API_TOKEN = os.getenv("BOT_TOKEN")
EDITOR_IDS_STR = os.getenv("EDITOR_IDS")  # –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
PUBLISH_CHAT_ID = os.getenv("PUBLISH_CHAT_ID")
BOT_NAME = os.getenv("BOT_NAME")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
required_env_vars = {
    "BOT_TOKEN": API_TOKEN,
    "EDITOR_IDS": EDITOR_IDS_STR,
    "PUBLISH_CHAT_ID": PUBLISH_CHAT_ID,
    "BOT_NAME": BOT_NAME,
}

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º EDITOR_IDS_STR –≤ —Å–ø–∏—Å–æ–∫ int
EDITOR_IDS = [int(x.strip()) for x in EDITOR_IDS_STR.split(",")]

# –ü—Ä–∏–≤–æ–¥–∏–º PUBLISH_CHAT_ID –∫ int
PUBLISH_CHAT_ID = int(PUBLISH_CHAT_ID)

# ----------------------------
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•
# ----------------------------
user_publish_choice = {}  # user_id -> "user" –∏–ª–∏ "potato"
pending_memes = {}  # meme_id -> {...}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –¥–ª—è ID –º–µ–º–æ–≤
meme_counter = 0


async def main():
    bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher()

    # /start ‚Äî –∑–∞–ø—Ä–æ—Å, –∫–∞–∫ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
    @dp.message(Command("start"))
    async def cmd_start(message: Message):
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üë§ –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏", callback_data="choice_user")],
                [InlineKeyboardButton(text="ü•î –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –∫–∞—Ä—Ç–æ—à–∫–∏", callback_data="choice_potato")]
            ]
        )
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ¬´{BOT_NAME}¬ª.\n–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –º–µ–º?",
            reply_markup=keyboard
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫ "user" –∏–ª–∏ "potato"
    @dp.callback_query(F.data.in_({"choice_user", "choice_potato"}))
    async def handle_choice(callback: CallbackQuery):
        user_id = callback.from_user.id

        if callback.data == "choice_user":
            user_publish_choice[user_id] = "user"
            await callback.message.answer("–ë—É–¥—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏. –ü—Ä–∏—à–ª–∏—Ç–µ –º–µ–º (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ).")
        else:
            user_publish_choice[user_id] = "potato"
            await callback.message.answer("–ë—É–¥—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –∫–∞—Ä—Ç–æ—à–∫–∏. –ü—Ä–∏—à–ª–∏—Ç–µ –º–µ–º (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ).")

        await callback.answer()

    # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã - –≤—Å—ë –≤ –æ–¥–Ω–æ–º —Ö–µ–Ω–¥–ª–µ—Ä–µ)
    @dp.message(F.content_type.in_({"text", "photo"}))
    async def handle_meme_suggestion(message: Message):
        user_id = message.from_user.id

        # –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ "user" –∏–ª–∏ "potato"
        if user_id not in user_publish_choice:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥ /start.")
            return

        global meme_counter
        meme_counter += 1
        meme_id = meme_counter

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        pending_memes[meme_id] = {
            "user_id": user_id,
            "publish_choice": user_publish_choice[user_id],
            "content": message
        }

        # –ö–Ω–æ–ø–∫–∏ "–û–¥–æ–±—Ä–∏—Ç—å"/"–û—Ç–∫–ª–æ–Ω–∏—Ç—å" –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        approve_button = InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{meme_id}")
        reject_button = InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{meme_id}")
        keyboard_for_editor = InlineKeyboardMarkup(inline_keyboard=[[approve_button, reject_button]])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä—É(–∞–º) –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        for editor_id in EDITOR_IDS:
            if message.photo:
                largest_photo = message.photo[-1].file_id
                await bot.send_photo(
                    chat_id=editor_id,
                    photo=largest_photo,
                    caption=(
                        f"–ú–µ–º ID: {meme_id}\n"
                        f"–û—Ç @{message.from_user.username or message.from_user.id}\n"
                        f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∫: {user_publish_choice[user_id]}"
                    ),
                    reply_markup=keyboard_for_editor
                )
            else:
                # –¢–µ–∫—Å—Ç
                await bot.send_message(
                    chat_id=editor_id,
                    text=(
                        f"–ú–µ–º ID: {meme_id}\n\n"
                        f"{message.text}\n\n"
                        f"–û—Ç @{message.from_user.username or message.from_user.id}\n"
                        f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∫: {user_publish_choice[user_id]}"
                    ),
                    reply_markup=keyboard_for_editor
                )

        await message.answer("–í–∞—à –º–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ "–û–¥–æ–±—Ä–∏—Ç—å"/"–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
    @dp.callback_query(F.data.startswith(("approve_", "reject_")))
    async def editor_callback(callback: CallbackQuery):
        data = callback.data  # –Ω–∞–ø—Ä. "approve_5"
        action, meme_id_str = data.split("_")
        meme_id = int(meme_id_str)

        if meme_id not in pending_memes:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
            return

        meme_info = pending_memes[meme_id]
        user_id = meme_info["user_id"]
        choice = meme_info["publish_choice"]
        original_message = meme_info["content"]

        if action == "approve":
            try:
                if original_message.photo:
                    largest_photo = original_message.photo[-1].file_id
                    cap = (
                        f"–ú–µ–º –æ—Ç @{original_message.from_user.username or user_id}"
                        if choice == "user"
                        else "–ú–µ–º –æ—Ç –ê–Ω–æ–Ω–∏–º–Ω–æ–π –ê–ª–ª—é–º–∏–Ω–∏–µ–≤–æ–π –ö–∞—Ä—Ç–æ—à–∫–∏"
                    )
                    await bot.send_photo(PUBLISH_CHAT_ID, photo=largest_photo, caption=cap)
                else:
                    txt = (
                        f"–ú–µ–º –æ—Ç @{original_message.from_user.username or user_id}:\n\n{original_message.text}"
                        if choice == "user"
                        else f"–ú–µ–º –æ—Ç –ê–Ω–æ–Ω–∏–º–Ω–æ–π –ê–ª–ª—é–º–∏–Ω–∏–µ–≤–æ–π –ö–∞—Ä—Ç–æ—à–∫–∏:\n\n{original_message.text}"
                    )
                    await bot.send_message(PUBLISH_CHAT_ID, txt)

                await bot.send_message(user_id, "–í–∞—à –º–µ–º –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
                await callback.message.answer(f"–ú–µ–º (ID {meme_id}) –æ–¥–æ–±—Ä–µ–Ω.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
                await callback.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –º–µ–º {meme_id}. –û—à–∏–±–∫–∞: {e}")
        else:
            await bot.send_message(user_id, "–í–∞—à –º–µ–º –æ—Ç–∫–ª–æ–Ω—ë–Ω —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º.")
            await callback.message.answer(f"–ú–µ–º (ID {meme_id}) –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

        del pending_memes[meme_id]
        await callback.answer()

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
