import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from dotenv import load_dotenv
from aiogram.client.bot import DefaultBotProperties

logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
EDITOR_IDS_STR = os.getenv("EDITOR_IDS")  # –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
PUBLISH_CHAT_ID = os.getenv("PUBLISH_CHAT_ID")
BOT_NAME = os.getenv("BOT_NAME")

# CRYPTOSELECTARCHY:
#   –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ ¬´–ö—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π –æ–ª–∏–≥–∞—Ä—Ö–∏–∏¬ª ‚Äî
#   —Ñ–æ—Ä–º—ã –ø—Ä–∞–≤–ª–µ–Ω–∏—è, –≥–¥–µ —Ä–µ—à–µ–Ω–∏—è (–ø—É–±–ª–∏–∫–∞—Ü–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –º–µ–º–∞) –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è
#   —Ç–∞–π–Ω—ã–º –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö ¬´–∫—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö–æ–≤¬ª.
#   –ï—Å–ª–∏ CRYPTOSELECTARCHY=true, –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –Ω–∞–±—Ä–∞—Ç—å 3 –≥–æ–ª–æ—Å–∞ ¬´–∑–∞¬ª,
#   –∞ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (—Å–Ω—è—Ç–∏—è) ‚Äî 3 –≥–æ–ª–æ—Å–∞ ¬´–ø—Ä–æ—Ç–∏–≤¬ª.
CRYPTOSELECTARCHY = (os.getenv("CRYPTOSELECTARCHY", "").lower() == "true")

if CRYPTOSELECTARCHY:
    print("–ö—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –æ–ª–∏–≥–∞—Ä—Ö–∏—è –≤–∫–ª—é—á–µ–Ω–∞! –í–ª–∞—Å—Ç—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–∞–π–Ω–æ–º—É —Å–æ–≤–µ—Ç—É –º—É–¥—Ä–µ—Ü–æ–≤.")
else:
    print("–ï–¥–∏–Ω–æ–ª–∏—á–Ω—ã–π –£–∑—É—Ä–ø–∞—Ç–æ—Ä —É –≤–ª–∞—Å—Ç–∏. –í—Å–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫.")


required_env_vars = {
    "BOT_TOKEN": API_TOKEN,
    "EDITOR_IDS": EDITOR_IDS_STR,
    "PUBLISH_CHAT_ID": PUBLISH_CHAT_ID,
    "BOT_NAME": BOT_NAME,
}
missing_vars = [k for k, v in required_env_vars.items() if not v]
if missing_vars:
    raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing_vars}")

EDITOR_IDS = [int(x.strip()) for x in EDITOR_IDS_STR.split(",")]
PUBLISH_CHAT_ID = int(PUBLISH_CHAT_ID)

user_publish_choice = {}  # user_id -> "user" –∏–ª–∏ "potato"

# –î–ª—è –∫–∞–∂–¥–æ–≥–æ meme_id —Ö—Ä–∞–Ω–∏—Ç—Å—è dict —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –º–µ–º–µ –∏ –≥–æ–ª–æ—Å–∞–º–∏ –∫—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö–æ–≤
pending_memes = {}
meme_counter = 0

# –ß–∏—Å–ª–æ –≥–æ–ª–æ—Å–æ–≤ ¬´–∑–∞¬ª / ¬´–ø—Ä–æ—Ç–∏–≤¬ª, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –∫—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π –æ–ª–∏–≥–∞—Ä—Ö–∏–∏
VOTES_TO_APPROVE = 3
VOTES_TO_REJECT = 3


async def main():
    bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher()

    @dp.message(Command("start"))
    async def cmd_start(message: Message):
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üë§ –û—Ç —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏ (–≤–∞—à–µ –∏–º—è –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω–æ).",
                        callback_data="choice_user"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="ü•î –ê–Ω–æ–Ω–∏–º–Ω–æ (–æ—Ç –∏–º–µ–Ω–∏ ¬´–ö–∞—Ä—Ç–æ—à–∫–∏¬ª).",
                        callback_data="choice_potato"
                    )
                ]
            ]
        )

        if CRYPTOSELECTARCHY:
            intro_text = (
                f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç {BOT_NAME}.\n\n"
                "–£—Ä–∞! –°–≤–µ—Ä—à–∏–ª–æ—Å—å! –ì–∞–¥–∫–∏–π –£–∑—É—Ä–ø–∞—Ç–æ—Ä –∫–∞–Ω—É–ª –≤ –Ω–µ–±—ã—Ç–∏–µ, –∏ —Ç–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—É–ø–∏–ª–∞ —ç–ø–æ—Ö–∞ –ö—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π –æ–ª–∏–≥–∞—Ä—Ö–∏–∏!\n"
                "–†–µ—à–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ —Ç–∞–π–Ω–æ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—è–º–∏. –ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏!\n\n"
                "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –º–µ–º?"
            )
        else:
            intro_text = (
                f"–ü—Ä–∏–≤–µ—Ç! –Ø {BOT_NAME}.\n\n"
                "–°–µ–π—á–∞—Å –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–∞ –ö—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –æ–ª–∏–≥–∞—Ä—Ö–∏—è.\n"
                "–í–æ –≤–ª–∞—Å—Ç–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ï–¥–∏–Ω–æ–ª–∏—á–Ω—ã–π –£–∑—É—Ä–ø–∞—Ç–æ—Ä, –Ω–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! –ö–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –æ–Ω –æ—Ç–æ–π–¥—ë—Ç –æ—Ç –≤–ª–∞—Å—Ç–∏ –∏ –ø–µ—Ä–µ–¥–∞—Å—Ç –µ—ë –≥—Ä—É–ø–ø–µ –º—É–¥—Ä—ã—Ö –ö—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö–æ–≤.\n\n"
                "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –º–µ–º?"
            )

        await message.answer(intro_text, reply_markup=keyboard)

    @dp.callback_query(F.data.in_({"choice_user", "choice_potato"}))
    async def handle_choice(callback: CallbackQuery):
        user_id = callback.from_user.id

        if callback.data == "choice_user":
            user_publish_choice[user_id] = "user"
            await callback.message.answer(
                "–ë—É–¥—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏. –ü—Ä–∏—à–ª–∏—Ç–µ –º–µ–º (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/gif)."
            )
        else:
            user_publish_choice[user_id] = "potato"
            await callback.message.answer(
                "–ë—É–¥—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ (–æ—Ç –∏–º–µ–Ω–∏ ¬´–ö–∞—Ä—Ç–æ—à–∫–∏¬ª). –ü—Ä–∏—à–ª–∏—Ç–µ –º–µ–º (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/gif)."
            )
        await callback.answer()

    # –î–æ–±–∞–≤–ª—è–µ–º "animation" –¥–ª—è gif
    @dp.message(F.content_type.in_({"text", "photo", "video", "animation"}))
    async def handle_meme_suggestion(message: Message):
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø–æ—Å–æ–± –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if user_id not in user_publish_choice:
            await message.answer(
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start."
            )
            return

        global meme_counter
        meme_counter += 1
        meme_id = meme_counter

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–º–µ
        pending_memes[meme_id] = {
            "user_id": user_id,
            "publish_choice": user_publish_choice[user_id],
            "content": message,
            "votes": {}  # editor_id -> "approve" –∏–ª–∏ "reject"
        }

        # –ö–Ω–æ–ø–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        approve_button = InlineKeyboardButton(
            text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
            callback_data=f"approve_{meme_id}"
        )
        reject_button = InlineKeyboardButton(
            text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
            callback_data=f"reject_{meme_id}"
        )
        keyboard_for_editor = InlineKeyboardMarkup(
            inline_keyboard=[[approve_button, reject_button]]
        )

        # "–û—Ç –∫–æ–≥–æ" –¥–ª—è –∫—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö–æ–≤
        if user_publish_choice[user_id] == "user":
            from_text = f"–û—Ç @{message.from_user.username or message.from_user.id}"
        else:
            from_text = "–û—Ç –ê–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

        # –¢–µ–∫—Å—Ç –º–µ–º–∞ (caption –∏–ª–∏ text)
        user_text = message.caption if message.caption else message.text
        meme_info_text = (
            f"–ú–µ–º ID: {meme_id}\n\n"
            f"{user_text}\n\n"
            f"{from_text}\n"
            f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∫: {user_publish_choice[user_id]}"
        )

        # –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º ¬´–∫—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö–∞–º¬ª (EDITOR_IDS)
        for editor_id in EDITOR_IDS:
            if message.photo:
                largest_photo_id = message.photo[-1].file_id
                await bot.send_photo(
                    chat_id=editor_id,
                    photo=largest_photo_id,
                    caption=meme_info_text,
                    reply_markup=keyboard_for_editor
                )
            elif message.video:
                video_id = message.video.file_id
                await bot.send_video(
                    chat_id=editor_id,
                    video=video_id,
                    caption=meme_info_text,
                    reply_markup=keyboard_for_editor
                )
            elif message.animation:
                animation_id = message.animation.file_id
                await bot.send_animation(
                    chat_id=editor_id,
                    animation=animation_id,
                    caption=meme_info_text,
                    reply_markup=keyboard_for_editor
                )
            else:
                # –¢–µ–∫—Å—Ç–æ–≤—ã–π –º–µ–º
                await bot.send_message(
                    chat_id=editor_id,
                    text=meme_info_text,
                    reply_markup=keyboard_for_editor
                )

        await message.answer("–í–∞—à –º–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")

    @dp.callback_query(F.data.startswith(("approve_", "reject_")))
    async def editor_callback(callback: CallbackQuery):
        data = callback.data
        action, meme_id_str = data.split("_")
        meme_id = int(meme_id_str)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –º–µ–º –µ—â—ë –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
        if meme_id not in pending_memes:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
            return

        meme_info = pending_memes[meme_id]
        user_id = meme_info["user_id"]
        choice = meme_info["publish_choice"]
        original_message = meme_info["content"]
        votes_dict = meme_info["votes"]

        # –¢–µ–∫—Å—Ç –º–µ–º–∞
        user_text = original_message.caption if original_message.caption else original_message.text

        editor_id = callback.from_user.id
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≥–æ–ª–æ—Å (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –∫—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å)
        votes_dict[editor_id] = action  # "approve" –∏–ª–∏ "reject"

        # --- –ï—Å–ª–∏ –∫—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –æ–ª–∏–≥–∞—Ä—Ö–∏—è (Cryptoselectarchy) –≤—ã–∫–ª—é—á–µ–Ω–∞ ---
        if not CRYPTOSELECTARCHY:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –æ–¥–∏–Ω –≥–æ–ª–æ—Å –≤—Å—ë —Ä–µ—à–∞–µ—Ç
            if action == "approve":
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ¬´–ø—Ä–µ—Ñ–∏–∫—Å¬ª –¥–ª—è –ø–æ—Å—Ç–∞
                    if choice == "user":
                        prefix = f"–ú–µ–º –æ—Ç @{original_message.from_user.username or user_id}"
                    else:
                        prefix = "–ú–µ–º –æ—Ç –ê–Ω–æ–Ω–∏–º–Ω–æ–π –ê–ª–ª—é–º–∏–Ω–∏–µ–≤–æ–π –ö–∞—Ä—Ç–æ—à–∫–∏"

                    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è
                    if original_message.photo:
                        photo_id = original_message.photo[-1].file_id
                        await bot.send_photo(
                            chat_id=PUBLISH_CHAT_ID,
                            photo=photo_id,
                            caption=(f"{prefix}\n\n{user_text}" if user_text else prefix)
                        )
                    elif original_message.video:
                        video_id = original_message.video.file_id
                        await bot.send_video(
                            chat_id=PUBLISH_CHAT_ID,
                            video=video_id,
                            caption=(f"{prefix}\n\n{user_text}" if user_text else prefix)
                        )
                    elif original_message.animation:
                        animation_id = original_message.animation.file_id
                        await bot.send_animation(
                            chat_id=PUBLISH_CHAT_ID,
                            animation=animation_id,
                            caption=(f"{prefix}\n\n{user_text}" if user_text else prefix)
                        )
                    else:
                        # –¢–µ–∫—Å—Ç
                        text_for_channel = f"{prefix}\n\n{user_text}"
                        await bot.send_message(
                            chat_id=PUBLISH_CHAT_ID,
                            text=text_for_channel
                        )

                    await bot.send_message(user_id, "–í–∞—à –º–µ–º –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
                    await callback.message.answer(f"–ú–µ–º (ID {meme_id}) –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
                    await callback.message.answer(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –º–µ–º (ID {meme_id}). –û—à–∏–±–∫–∞: {e}"
                    )
            else:
                # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
                await bot.send_message(user_id, "–í–∞—à –º–µ–º –æ—Ç–∫–ª–æ–Ω—ë–Ω —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º.")
                await callback.message.answer(f"–ú–µ–º (ID {meme_id}) –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

            # –£–±–∏—Ä–∞–µ–º –∏–∑ ¬´–æ–∂–∏–¥–∞–Ω–∏—è¬ª
            del pending_memes[meme_id]
            await callback.answer()
            return

        # --- –ù–∏–∂–µ –ª–æ–≥–∏–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á—ë–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π –æ–ª–∏–≥–∞—Ä—Ö–∏–∏ ---
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞
        approves = sum(1 for v in votes_dict.values() if v == "approve")
        rejects = sum(1 for v in votes_dict.values() if v == "reject")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö–∞, —á—Ç–æ –µ–≥–æ –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω
        await callback.answer("–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω", show_alert=False)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º –≥–æ–ª–æ—Å–µ
        if action == "approve":
            await bot.send_message(
                user_id,
                "–ï—â—ë –æ–¥–∏–Ω –ö—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –ó–ê –≤–∞—à –º–µ–º!"
            )
        else:  # reject
            await bot.send_message(
                user_id,
                "–ï—â—ë –æ–¥–∏–Ω –ö—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö –æ—Ç–≤–µ—Ä–≥ –≤–∞—à –Ω–µ—Å–º–µ—à–Ω–æ–π –º–µ–º!"
            )

        # –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–æ—Å—å 3 –≥–æ–ª–æ—Å–∞ ¬´–∑–∞¬ª, –ø—É–±–ª–∏–∫—É–µ–º
        if approves >= VOTES_TO_APPROVE:
            try:
                if choice == "user":
                    prefix = f"–ú–µ–º –æ—Ç @{original_message.from_user.username or user_id}"
                else:
                    prefix = "–ú–µ–º –æ—Ç –ê–Ω–æ–Ω–∏–º–Ω–æ–π –ê–ª–ª—é–º–∏–Ω–∏–µ–≤–æ–π –ö–∞—Ä—Ç–æ—à–∫–∏"

                if original_message.photo:
                    photo_id = original_message.photo[-1].file_id
                    await bot.send_photo(
                        chat_id=PUBLISH_CHAT_ID,
                        photo=photo_id,
                        caption=(f"{prefix}\n\n{user_text}" if user_text else prefix)
                    )
                elif original_message.video:
                    video_id = original_message.video.file_id
                    await bot.send_video(
                        chat_id=PUBLISH_CHAT_ID,
                        video=video_id,
                        caption=(f"{prefix}\n\n{user_text}" if user_text else prefix)
                    )
                elif original_message.animation:
                    animation_id = original_message.animation.file_id
                    await bot.send_animation(
                        chat_id=PUBLISH_CHAT_ID,
                        animation=animation_id,
                        caption=(f"{prefix}\n\n{user_text}" if user_text else prefix)
                    )
                else:
                    # –¢–µ–∫—Å—Ç
                    text_for_channel = f"{prefix}\n\n{user_text}"
                    await bot.send_message(
                        chat_id=PUBLISH_CHAT_ID,
                        text=text_for_channel
                    )

                await bot.send_message(user_id, "–í–∞—à –º–µ–º –Ω–∞–±—Ä–∞–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–æ—Å–æ–≤ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
                del pending_memes[meme_id]

                # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, —Ç.–∫. —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ
                await callback.message.edit_reply_markup(reply_markup=None)

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
                await callback.message.answer(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –º–µ–º (ID {meme_id}). –û—à–∏–±–∫–∞: {e}"
                )
            return

        # –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–æ—Å—å 3 –≥–æ–ª–æ—Å–∞ ¬´–ø—Ä–æ—Ç–∏–≤¬ª, –æ—Ç–∫–ª–æ–Ω—è–µ–º
        if rejects >= VOTES_TO_REJECT:
            await bot.send_message(user_id, "–ú–µ–º –Ω–∞–±—Ä–∞–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤ –ü–†–û–¢–ò–í –∏ –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
            del pending_memes[meme_id]

            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            await callback.message.edit_reply_markup(reply_markup=None)
            return

        # –ï—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤ –µ—â—ë –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –∂–¥—ë–º –¥–∞–ª—å–Ω–µ–π—à–∏—Ö.

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
