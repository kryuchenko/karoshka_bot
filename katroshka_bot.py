import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from dotenv import load_dotenv
from aiogram.client.bot import DefaultBotProperties

logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env)
API_TOKEN = os.getenv("BOT_TOKEN")
EDITOR_IDS_STR = os.getenv("EDITOR_IDS")  # –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
PUBLISH_CHAT_ID = os.getenv("PUBLISH_CHAT_ID")
BOT_NAME = os.getenv("BOT_NAME")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
required_env_vars = {
    "BOT_TOKEN": API_TOKEN,
    "EDITOR_IDS": EDITOR_IDS_STR,
    "PUBLISH_CHAT_ID": PUBLISH_CHAT_ID,
    "BOT_NAME": BOT_NAME,
}
missing_vars = [k for k, v in required_env_vars.items() if not v]
if missing_vars:
    raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing_vars}")

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º EDITOR_IDS_STR –≤ —Å–ø–∏—Å–æ–∫ int
EDITOR_IDS = [int(x.strip()) for x in EDITOR_IDS_STR.split(",")]

# –ü—Ä–∏–≤–æ–¥–∏–º PUBLISH_CHAT_ID –∫ int
PUBLISH_CHAT_ID = int(PUBLISH_CHAT_ID)

# ----------------------------
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•
# ----------------------------
user_publish_choice = {}  # user_id -> "user" –∏–ª–∏ "potato"
pending_memes = {}        # meme_id -> {...}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –¥–ª—è ID –º–µ–º–æ–≤
meme_counter = 0


async def main():
    bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher()

    # /start ‚Äî –∑–∞–ø—Ä–æ—Å, –∫–∞–∫ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
    @dp.message(Command("start"))
    async def cmd_start(message: Message):
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üë§ –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏",
                        callback_data="choice_user"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="ü•î –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ (–æ—Ç \"–∫–∞—Ä—Ç–æ—à–∫–∏\")",
                        callback_data="choice_potato"
                    )
                ]
            ]
        )
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ¬´{BOT_NAME}¬ª.\n–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –º–µ–º?",
            reply_markup=keyboard
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫ "user" –∏–ª–∏ "potato"
    @dp.callback_query(F.data.in_({"choice_user", "choice_potato"}))
    async def handle_choice(callback: CallbackQuery):
        user_id = callback.from_user.id

        if callback.data == "choice_user":
            user_publish_choice[user_id] = "user"
            await callback.message.answer(
                "–ë—É–¥—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏. –ü—Ä–∏—à–ª–∏—Ç–µ –º–µ–º (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ)."
            )
        else:
            user_publish_choice[user_id] = "potato"
            await callback.message.answer(
                "–ë—É–¥—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ (–æ—Ç –∏–º–µ–Ω–∏ ¬´–∫–∞—Ä—Ç–æ—à–∫–∏¬ª). –ü—Ä–∏—à–ª–∏—Ç–µ –º–µ–º (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ)."
            )

        await callback.answer()

    # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç (–≤ –æ–¥–Ω–æ–º —Ö–µ–Ω–¥–ª–µ—Ä–µ)
    @dp.message(F.content_type.in_({"text", "photo", "video"}))
    async def handle_meme_suggestion(message: Message):
        user_id = message.from_user.id

        # –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ "user" –∏–ª–∏ "potato" ‚Äî –ø—Ä–æ—Å–∏–º —Å–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä
        if user_id not in user_publish_choice:
            await message.answer(
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start."
            )
            return

        global meme_counter
        meme_counter += 1
        meme_id = meme_counter

        # –°–æ—Ö—Ä–∞–Ω–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø—Ä–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∑–Ω–∞—Ç—å —á—Ç–æ –±—ã–ª–æ
        pending_memes[meme_id] = {
            "user_id": user_id,
            "publish_choice": user_publish_choice[user_id],
            "content": message
        }

        # –ö–Ω–æ–ø–∫–∏ "–û–¥–æ–±—Ä–∏—Ç—å"/"–û—Ç–∫–ª–æ–Ω–∏—Ç—å" –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        approve_button = InlineKeyboardButton(
            text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
            callback_data=f"approve_{meme_id}"
        )
        reject_button = InlineKeyboardButton(
            text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
            callback_data=f"reject_{meme_id}"
        )
        keyboard_for_editor = InlineKeyboardMarkup(
            inline_keyboard=[[approve_button, reject_button]]
        )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        if user_publish_choice[user_id] == "user":
            from_text = f"–û—Ç @{message.from_user.username or message.from_user.id}"
        else:
            from_text = "–û—Ç –ê–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –ø–æ–¥–ø–∏—Å—å (caption) –∫ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ ‚Äî –±–µ—Ä—ë–º –µ—ë,
        # –∏–Ω–∞—á–µ –±–µ—Ä—ë–º message.text –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        user_text = message.caption if message.caption else message.text

        # –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞–º –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è
        for editor_id in EDITOR_IDS:
            if message.photo:
                # –§–æ—Ç–æ
                largest_photo_id = message.photo[-1].file_id
                await bot.send_photo(
                    chat_id=editor_id,
                    photo=largest_photo_id,
                    caption=(
                        f"–ú–µ–º ID: {meme_id}\n\n"
                        f"{user_text}\n\n"
                        f"{from_text}\n"
                        f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∫: {user_publish_choice[user_id]}"
                    ),
                    reply_markup=keyboard_for_editor
                )
            elif message.video:
                # –í–∏–¥–µ–æ
                video_id = message.video.file_id
                await bot.send_video(
                    chat_id=editor_id,
                    video=video_id,
                    caption=(
                        f"–ú–µ–º ID: {meme_id}\n\n"
                        f"{user_text}\n\n"
                        f"{from_text}\n"
                        f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∫: {user_publish_choice[user_id]}"
                    ),
                    reply_markup=keyboard_for_editor
                )
            else:
                # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.send_message(
                    chat_id=editor_id,
                    text=(
                        f"–ú–µ–º ID: {meme_id}\n\n"
                        f"{user_text}\n\n"
                        f"{from_text}\n"
                        f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∫: {user_publish_choice[user_id]}"
                    ),
                    reply_markup=keyboard_for_editor
                )

        await message.answer("–í–∞—à –º–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–û–¥–æ–±—Ä–∏—Ç—å"/"–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
    @dp.callback_query(F.data.startswith(("approve_", "reject_")))
    async def editor_callback(callback: CallbackQuery):
        data = callback.data  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "approve_5"
        action, meme_id_str = data.split("_")
        meme_id = int(meme_id_str)

        if meme_id not in pending_memes:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
            return

        meme_info = pending_memes[meme_id]
        user_id = meme_info["user_id"]
        choice = meme_info["publish_choice"]
        original_message = meme_info["content"]

        # –¢–æ, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (caption –∏–ª–∏ text)
        user_text = original_message.caption if original_message.caption else original_message.text

        if action == "approve":
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∫–∞–Ω–∞–ª–∞
                # –ü—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ
                if choice == "user":
                    # –£–∫–∞–∂–µ–º @username, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ user_id
                    prefix = f"–ú–µ–º –æ—Ç @{original_message.from_user.username or user_id}"
                else:
                    prefix = "–ú–µ–º –æ—Ç –ê–Ω–æ–Ω–∏–º–Ω–æ–π –ê–ª–ª—é–º–∏–Ω–∏–µ–≤–æ–π –ö–∞—Ä—Ç–æ—à–∫–∏"

                # –ü—É–±–ª–∏–∫–∞—Ü–∏—è
                if original_message.photo:
                    photo_id = original_message.photo[-1].file_id
                    await bot.send_photo(
                        chat_id=PUBLISH_CHAT_ID,
                        photo=photo_id,
                        caption=(f"{prefix}\n\n{user_text}" if user_text else prefix)
                    )
                elif original_message.video:
                    video_id = original_message.video.file_id
                    await bot.send_video(
                        chat_id=PUBLISH_CHAT_ID,
                        video=video_id,
                        caption=(f"{prefix}\n\n{user_text}" if user_text else prefix)
                    )
                else:
                    # –¢–µ–∫—Å—Ç
                    text_for_channel = f"{prefix}:\n\n{user_text}"
                    await bot.send_message(
                        chat_id=PUBLISH_CHAT_ID,
                        text=text_for_channel
                    )

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
                await bot.send_message(user_id, "–í–∞—à –º–µ–º –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
                await callback.message.answer(f"–ú–µ–º (ID {meme_id}) –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
                await callback.message.answer(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –º–µ–º (ID {meme_id}). –û—à–∏–±–∫–∞: {e}"
                )
        else:
            # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
            await bot.send_message(user_id, "–í–∞—à –º–µ–º –æ—Ç–∫–ª–æ–Ω—ë–Ω —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º.")
            await callback.message.answer(f"–ú–µ–º (ID {meme_id}) –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        del pending_memes[meme_id]
        await callback.answer()

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
